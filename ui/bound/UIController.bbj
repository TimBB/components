rem package components.ui.bound

use ::components/bl/BusinessComponent.bbj::BusinessComponent

rem /**
rem * UIController
rem *
rem * Controller class to link BusinessComponents that drive each other
rem * by variables, e.g. master-detail views
rem *
rem * @author Stephan Wald
rem * @version 1.0
rem */
class public UIController

    field private java.util.HashMap Drivers!
    field private java.util.HashMap DriverFieldNames!
    field private java.util.HashMap FullResultsetDrivers!
    field private java.util.HashMap FullResultsetDriverFieldNames!
    field private java.util.HashMap Targets!
    field private java.util.HashMap TargetFieldNames!
    field private java.util.HashMap TargetAutoSelectFirstRecord!


    rem /**
    rem * Constructor UIController
    rem */
    method public UIController()

        #Targets!                       = new java.util.HashMap()
        #TargetFieldNames!              = new java.util.HashMap()
        #Drivers!                       = new java.util.HashMap()
        #DriverFieldNames!              = new java.util.HashMap()
        #FullResultsetDrivers!          = new java.util.HashMap()
        #FullResultsetDriverFieldNames! = new java.util.HashMap()
        #TargetAutoSelectFirstRecord!   = new java.util.HashMap()

    methodend


    rem /**
    rem * Method registerDriver:
    rem * Register a business component that acts as a driver and
    rem * will impact target business components with its current selection
    rem * @param BusinessComponent bc: driving business component
    rem * @param BBjString var$: The variable that the business component drives
    rem * @param BBjString fieldname$: The fieldname that is reported on its change
    rem */
    method public void registerDriver (BusinessComponent bc!, BBjString var$, BBjString fieldname$)

        #registerDriver(bc!,var$,fieldname$,0)

    methodend


    rem /**
    rem * Method registerDriver:
    rem * Register a business component that acts as a driver and
    rem * will impact target business components with its current selection
    rem * @param BusinessComponent bc: driving business component
    rem * @param BBjString var$: The variable that the business component drives
    rem * @param BBjString fieldname$: The fieldname that is reported on its change
    rem * @param BBjNumber fDriveWithFullResult: when set to 1, the whole resultset is reported instead of only the selection
    rem */
    method public void registerDriver (BusinessComponent bc!, BBjString var$, BBjString fieldname$, BBjNumber fDriveWithFullResult)

        if fDriveWithFullResult then
            v!  = #FullResultsetDrivers!.get(var$)
            v1! = #FullResultsetDriverFieldNames!.get(var$)

            if v! =null() then
                v! = new BBjVector()
                #FullResultsetDrivers!.put(var$,v!)

                v1! = new BBjVector()
                #FullResultsetDriverFieldNames!.put(var$,v1!)
            fi

            v!.addItem(bc!)
            v1!.addItem(fieldname$)

            bc!.registerController(#this!, var$, fieldname$,1)
        else
            v!  = #Drivers!.get(var$)
            v1! = #DriverFieldNames!.get(var$)

            if v! =null() then
                v! = new BBjVector()
                #Drivers!.put(var$,v!)

                v1! = new BBjVector()
                #DriverFieldNames!.put(var$,v1!)
            fi

            v!.addItem(bc!)
            v1!.addItem(fieldname$)

            bc!.registerController(#this!, var$, fieldname$)
        fi

    methodend


    rem /**
    rem * Method registerTarget:
    rem * Register a business component that will be driven by other
    rem * driver-business components
    rem * @param BusinessComponent bc: target business component
    rem * @param BBjString var$: The variable that drives this business component
    rem * @param BBjString fieldname$: the field name driven by the contents of the variable
    rem */
    method public void registerTarget (BusinessComponent bc!, BBjString var$, BBjString fieldname$)

        #registerTarget (bc!, var$, fieldname$,0)

    methodend


    rem /**
    rem * Method registerTarget:
    rem * Register a business component that will be driven by other
    rem * driver-business components
    rem * @param BusinessComponent bc: target business component
    rem * @param BBjString var$: The variable that drives this business component
    rem * @param BBjString fieldname$: the field name driven by the contents of the variable
    rem * @param BBjNumber positionOnFirstRecord: if set to 1, after driving the first record of the new resultset will be selected
    rem */
    method public void registerTarget (BusinessComponent bc!, BBjString var$, BBjString fieldname$, BBjNumber positionOnFirstRecord)

        v!  = #Targets!.get(var$)
        v1! = #TargetFieldNames!.get(var$)

        if v!=null() then
            v! = new BBjVector()
            #Targets!.put(var$,v!)

            v1! = new BBjVector()
            #TargetFieldNames!.put(var$,v1!)
        fi

        v!.addItem(bc!)
        v1!.addItem(fieldname$)

        if positionOnFirstRecord then
            #TargetAutoSelectFirstRecord!.put(fieldname$,1)
        fi

        bc!.drive(fieldname$,null())


        if positionOnFirstRecord then
            bc!.prepareResultSet(0,0)
            if bc!.getResultSet().size()>0 then
                v! = new BBjVector()
                v!.addItem(0)
                bc!.setSelection(v!)
            fi
        fi

    methodend


    rem /**
    rem * Method unregisterTarget:
    rem * unregister a business component that was driven by other
    rem * driver-business components
    rem * @param BBjString var$: The variable that drives this business component
    rem * @param BBjString fieldname$: the field name driven by the contents of the variable
    rem */
    method public void unregisterTarget (BBjString var$, BBjString fieldname$)

        v!  = #Targets!.get(var$)
        v1! = #TargetFieldNames!.get(var$)

        if v1!<>null() and v1!.size() then
            for i=0 to v1!.size()-1
                if v1!.getItem(i)=fieldname$ then
                    bc! = v!.getItem(i)
                    v1!.removeItem(i)
                    v!.removeItem(i)

                    bc!.resetdrive(fieldname$)
                    bc!.refresh(0)
                fi
            next i
        fi

        #TargetAutoSelectFirstRecord!.remove(fieldname$,err=*next)

    methodend


    rem /**
    rem * Method canDrive:
    rem * Check if a selection change can be finished by asking all registered target business components
    rem * @param BBjString var$: The variable that is about to be changed
    rem * @param BBjVector selection!: The new selected value(s) for that component
    rem * @param BBjNumber force: notify the other components of a mandatory selection change with no option to veto
    rem * @return BBjNumber canDrive: 0=change of selection denied, 1=change of selection allowed
    rem */
    method public BBjNumber canDrive (BBjString var$, BBjVector selection!, BBjNumber force)

        canDrive=1

        bclist! = #Targets!.get(var$)
        vlist!  = #TargetFieldNames!.get(var$)

        if bclist! <> null() then
            if bclist!.size() then
                for i=0 to bclist!.size()-1
                    bc! = bclist!.getItem(i)
                    v$  = vlist!.getItem(i)
                    canDrive = canDrive and bc!.canDrive(v$,selection!, force)
                next i
            fi
        fi

        methodret canDrive

    methodend


    rem /**
    rem * Method drive:
    rem * broadcast a selection change to the concerned target business components
    rem * @param BBjString var$: The variable that has changed
    rem * @param BBjVector selection!: The new selected value(s) for that component
    rem */
    method public void drive (BBjString var$, BBjVector selection!)

        bclist! = #Targets!.get(var$)
        vlist!  = #TargetFieldNames!.get(var$)

        if bclist! <> null() then
            if bclist!.size() then
                for i=0 to bclist!.size()-1
                    bc! = bclist!.getItem(i)
                    v$  = vlist!.getItem(i)
                    bc!.drive(v$,selection!)

                    autSel! = #TargetAutoSelectFirstRecord!.get(v$)
                    if autSel! <> null() then
                        bc!.prepareResultSet(0,0)
                        if bc!.getResultSet().size()>0 then
                            v! = new BBjVector()
                            v!.addItem(0)
                            bc!.setSelection(v!)
                        fi
                    fi
                next i
            fi
        fi

    methodend

classend
