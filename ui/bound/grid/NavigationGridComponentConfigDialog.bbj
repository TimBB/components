rem package components.ui.bound.grid

use ::translations/bbtranslator.bbj::BBTranslator
use ::components/i18n/i18n.bbj::i18n


rem /**
rem * NavigationGridComponentConfigDialog
rem *
rem * @author Stephan Wald
rem * @version 1.0
rem */
class public NavigationGridComponentConfigDialog

    field private BBjTopLevelWindow Wnd!

    field private BBjStandardGrid Grid!
    field private BBjButton BtnOK!
    field private BBjButton BtnCancel!
    field private BBjButton BtnRestore!
    field private BBjButton BtnUp!
    field private BBjButton BtnDown!
    field private BBjButton BtnTop!
    field private BBjButton BtnLast!


    field private BBjNumber X=10
    field private BBjNumber Y=10

    field private BBjVector GridColumns!
    field private BBjVector GridColumnsOrig!

    field private static BBTranslator  Translator! = i18n.getTranslator()


    rem /**
    rem * Constructor NavigationGridComponentConfigDialog
    rem * Default constructor
    rem * @param BBjWindow wnd!: child window that the component shall occupy
    rem */
    method public NavigationGridComponentConfigDialog()

    methodend


    rem /**
    rem * Constructor NavigationGridComponentConfigDialog
    rem * Creates the component and set the position to x,y
    rem * @param BBjNumber x: x-coordinate
    rem * @param BBjNumber y: y-coordinate
    rem */
    method public NavigationGridComponentConfigDialog(BBjNumber x, BBjNumber y)

        #this!()

        #X=x
        #Y=y

    methodend


    method private BBjVector cloneVector(BBjVector in!)

        out! = new BBjVector()

        if in!.size() then
            for i=0 to in!.size()-1
                out!.addItem(in!.getItem(i))
            next
        fi

        methodret out!

    methodend


    rem /**
    rem * Method setGridColumns:
    rem * set the content of the grid
    rem * @param BBjVector vec!: grid content as BBjVector
    rem */
    method public void setGridColumns(BBjVector v!)

        #GridColumnsOrig! = v!
        #GridColumns! = cast(BBjVector,#cloneVector(v!))

    methodend


    rem /**
    rem * Method setGridColumns:
    rem * get the grid content as BBjVector
    rem * @return BBjVector: the grid content as BBjVector
    rem */
    method public BBjVector getGridColumns()

        methodret #GridColumns!

    methodend


    rem /**
    rem * Method resetGrid:
    rem * reset the content of the grid
    rem */
    method private void resetGrid()

        #Grid!.setNumRows(#GridColumns!.size())

        for i=0 to #GridColumns!.size()-1
            t! = #GridColumns!.getItem(i)
            #Grid!.setCellText(i,1,t!.getFieldAsString("NAME"))
            #Grid!.setCellText(i,2,t!.getFieldAsString("DESC"))
            #Grid!.setCellState(i,0,num(t!.getFieldAsNumber("VISIBLE")))
        next

    methodend


    rem /**
    rem * Method doModal:
    rem * show a modal dialog window holding the component
    rem * @return BBjNumber ret: 1=user hit "OK", 0=user hit "Cancel" or closed / aborted the window
    rem */
    method public BBjNumber doModal()

        if #GridColumns! = null() then
            throw "Grid Column List not set",250
        fi

        declare BBjSysGui sysgui!

        sysgui! = BBjAPI().getSysGui(err=*next)

        if sysgui! = null() then
            sysgui! = BBjAPI().openSysGui("X0")
        fi

        #Wnd!=sysgui!.addWindow(sysgui!.getAvailableContext(),10,10,475,400,"Grid Setup",$00080002$ )
        #Wnd!.setCallback(#Wnd!.ON_CLOSE,"cancel")
        #Wnd!.setCallback(#Wnd!.ON_RESIZE,#this!,"onResize")


        #Grid!=#Wnd!.addGrid(100,5,5,295,390)
        #Grid!.setNumColumns(3)
        #Grid!.setColumnWidth(0,60)
        #Grid!.setColumnStyle(0,#Grid!.GRID_STYLE_UNCHECKED)
        #Grid!.setColumnAlignment(1,#Grid!.GRID_ALIGN_LEFT)
        #Grid!.setColumnAlignment(2,#Grid!.GRID_ALIGN_LEFT)
        #Grid!.setFitToGrid(#Grid!.AUTO_RESIZE_LAST_COLUMN)
        #Grid!.setUserResizable(1)
        #Grid!.setVerticalScrollable(1)

        #Grid!.setRowHeight(20)
        #Grid!.setHasColumnHeader(1)

        rem #Grid!.setShouldHighlightSelectedRow(0)
        #Grid!.setSelectionMode(#Grid!.GRID_SELECT_ROW)
        #Grid!.deselectAllCells()

        #Grid!.setCallback(#Grid!.ON_DROP_TARGET_DROP,#this!,"onGridDragDrop")
        #Grid!.setDragAccept(0)

        #Grid!.setCallback(#Grid!.ON_GRID_MOUSE_DOWN,#this!,"onGridClick")

        if #GridColumns!.size()=0 then
            a=msgbox(#Translator!.getTranslation("NO_COLUMNS"),BBjAPI().getConstants().MB_ICONEXCLAMATION,#Translator!.getTranslation("GRID_SETUP"))
        else
            #resetGrid()
        fi

        #BtnTop!    =#Wnd!.addButton(110,350,5,120,25,#Translator!.getTranslation("TOP"))
        #BtnUp!     =#Wnd!.addButton(111,350,35,120,25,#Translator!.getTranslation("UP"))
        #BtnDown!   =#Wnd!.addButton(112,350,65,120,25,#Translator!.getTranslation("DOWN"))
        #BtnLast!   =#Wnd!.addButton(113,350,95,120,25,#Translator!.getTranslation("LAST"))

        #BtnRestore!=#Wnd!.addButton(114,350,125,120,25,#Translator!.getTranslation("RESTORE"))

        #BtnOK!     =#Wnd!.addButton(1,350,335,120,25,#Translator!.getTranslation("OK"))
        #BtnCancel! =#Wnd!.addButton(2,350,365,120,25,#Translator!.getTranslation("CANCEL"))

        #BtnTop!.setCallback(BBjAPI().ON_BUTTON_PUSH,#this!,"onBtnTop")
        #BtnUp!.setCallback(BBjAPI().ON_BUTTON_PUSH,#this!,"onBtnUp")
        #BtnDown!.setCallback(BBjAPI().ON_BUTTON_PUSH,#this!,"onBtnDown")
        #BtnLast!.setCallback(BBjAPI().ON_BUTTON_PUSH,#this!,"onBtnLast")
        #BtnRestore!.setCallback(BBjAPI().ON_BUTTON_PUSH,#this!,"onBtnRestore")

        #BtnOK!.setCallback(BBjAPI().ON_BUTTON_PUSH,"ok")
        #BtnCancel!.setCallback(BBjAPI().ON_BUTTON_PUSH,"cancel")



        process_events

        ok:
        ret=1

        cancel:

        #Wnd!.destroy()

        methodret ret

    methodend


    method public void onResize(BBjResizeEvent ev!)

        w=ev!.getWidth()
        h=ev!.getHeight()

        #Grid!.setSize(w-180,h-10)

        #BtnTop!.setLocation(w-125,5)
        #BtnUp!.setLocation(w-125,35)
        #BtnDown!.setLocation(w-125,65)
        #BtnLast!.setLocation(w-125,95)
        #BtnRestore!.setLocation(w-125,125)

        #BtnOK!.setLocation(w-125,h-65)
        #BtnCancel!.setLocation(w-125,h-35)

    methodend


    method public void onGridClick(BBjGridMouseDownEvent ev!)

        row = ev!.getRow()

        if ev!.getColumn() = 0 and row >= 0 then
            state=#Grid!.getCellState(row,0)

            if state then
                state=0
            else
                state=1
            fi

            #Grid!.setCellState(row,0,state)

            z!=#GridColumns!.getItem(row)
            z!.setFieldValue("VISIBLE",state)
            #GridColumns!.removeItem(row)
            #GridColumns!.insertItem(row,z!)
        fi

    methodend


    method public void onGridDragDrop(BBjDropTargetDropEvent ev!)

        source=#Grid!.getSelectedRow()
        target=num( ev!.getDropLocation().getItem(0))
        #moveRow(source,target)

    methodend


    rem /**
    rem * Method moveRow:
    rem * move a row from source pos to target pos
    rem * @param BBjNumber source: the row that shall be moved
    rem * @param BBjNumber target: the target row position
    rem */
    method private void moveRow(BBjNumber source, BBjNumber target)

        if source<0 or target<0 then methodret

        if source>#GridColumns!.size() or target> #GridColumns!.size() then methodret

        if source=target then methodret

        z!=#GridColumns!.getItem(source)
        #GridColumns!.removeItem(source)

        if source<target then
            target=target-1
        fi

        #GridColumns!.insertItem(target,z!)
        #resetGrid()
        #Grid!.setSelectedRow(target)

    methodend


    method public void onBtnTop(BBjButtonPushEvent ev!)

        source=#Grid!.getSelectedRow()

        if source>0 then
            #moveRow(source,0)
        fi

    methodend


    method public void onBtnUp(BBjButtonPushEvent ev!)

        source=#Grid!.getSelectedRow()

        if source>0 then
            #moveRow(source,source-1)
        fi

    methodend


    method public void onBtnDown(BBjButtonPushEvent ev!)

        source=#Grid!.getSelectedRow()
        #moveRow(source,source+2)

    methodend


    method public void onBtnLast(BBjButtonPushEvent ev!)

        source=#Grid!.getSelectedRow()
        #moveRow(source,#GridColumns!.size())

    methodend


    method public void onBtnRestore(BBjButtonPushEvent ev!)

        #GridColumns! = cast(BBjVector,#cloneVector(#GridColumnsOrig!))
        #resetGrid()

    methodend

classend



declare NavigationGridComponentConfigDialog dlg!
dlg! = new NavigationGridComponentConfigDialog()

v!=new BBjVector()


for i=1 to 10
    t! = BBjAPI().makeTemplatedString("NAME:C(10*),DESC:C(10*),VISIBLE:N(1)")
    t!.setFieldValue("NAME",str(i:"000000"))
    t!.setFieldValue("DESC","Desc "+str(i))
    t!.setFieldValue("VISIBLE",mod(i,2))
    v!.addItem(t!)
next

dlg!.setGridColumns(v!)

if dlg!.doModal() then
    a=msgbox(str(dlg!.getGridColumns()))
fi

