rem package components.bl

rem /**
rem * DataProviderBusinessComponent
rem *
rem * Implementation of a core SQL-based Business Component
rem *
rem * @author Stephan Wald
rem * @version 1.0
rem */

use ::components/bl/BusinessComponent.bbj::BusinessComponent
use ::components/db/DataRow.bbj::DataRow
use ::components/db/DataRow.bbj::DataField

use ::components/db/DataProvider.bbj::DataProvider

class public DataProviderBusinessComponent extends BusinessComponent

    rem /**
    rem * Method setWhere:
    rem * sets a fixed where clause, other filters, set by drive, will be ignored 
    rem * @param BBjString whereClause$ 
    rem */
    method public void setWhere(BBjString whereClause$)

        #getDataProvider().setWhere(whereClause$)

    methodend

    rem /**
    rem * Method getDistinctValues:
    rem * returns distinct values in a given column of the resultset
    rem * these values are mainly used for filterin purpose
    rem * @param BBjString fieldName$: the column name for which the distinct values are requested
    rem * @return java.util.TreeMap distinct!: the distinct values
    rem */
    method public java.util.TreeMap getDistinctValues(BBjString fieldName$)

        methodret #getDataProvider().getDistinctValues(fieldName$)

    methodend


    rem /**
    rem * Method size:
    rem * return size of result set
    rem * @return BBjNumber size: the size of the whole result set
    rem */
    method public BBjNumber size()

        methodret #getDataProvider().size()

    methodend


    rem /**
    rem * Method setQueryFilter:
    rem * filters the result set
    rem * @param java.util.HashMap filter!: a hash map that holds the filter information, key is the column, data is a BBjVector holding the values for the filter
    rem */
    method public void setQueryFilter(java.util.HashMap filter!)

        #super!.setQueryFilter(filter!)

        #getDataProvider().setQueryFilter(filter!)

        #refresh(0)

    methodend


    rem /**
    rem * Method drive:
    rem * called by the controller when a change of the selection occured (from outside)
    rem * @param BBjString var$: the variable that changed
    rem * @param BBjVector selection!: the new selection
    rem */
    method public void drive(BBjString var$, BBjVector selection!)

        rem print "drive ",var$,selection!

        #super!.getControllerFilter().put(var$,selection!)

        #getDataProvider().putControllerFilter(var$,selection!)

        #refresh(1)

    methodend


    rem /**
    rem * Method drive:
    rem * called by the controller when a change of the selection occured (from outside)
    rem * @param BBjString var$: the variable that changed
    rem * @param BBjString selection$: the new selection (one item only)
    rem */
    method public void drive(BBjString var$, BBjString selection$)

        v! = new BBjVector()
        v!.addItem(selection$)
        #super!.getControllerFilter().put(var$,v!)

        #getDataProvider().putControllerFilter(var$,v!)

        #refresh(1)

        #prepareResultSet(0,0)
        if #getResultSet().size()>0 then
            v! = new BBjVector()
            v!.addItem(0)
            #setSelection(v!)
        fi        
   
    methodend


    rem /**
    rem * Method resetdrive:
    rem * reset one particular controller filter (set by drive)
    rem * @param BBjString var$: the variable that changed
    rem */
    method public void resetdrive(BBjString var$)

        #super!.getControllerFilter().remove(var$)

        #getDataProvider().clearControllerFilter(var$)

        #refresh(1)

    methodend


    rem /**
    rem * Method resetdrive:
    rem * reset all controller filter (set by drive)
    rem */
    method public void resetdrive()

        #getDataProvider().setWhere("")

        kf! = #super!.getControllerFilter().clone()
        ks! = kf!.keySet()
        it! = ks!.iterator()
        while it!.hasNext()
            var$=it!.next()
            #super!.getControllerFilter().remove(var$)
        wend

        #getDataProvider().clearControllerFilter(var$)
        #refresh(1)

    methodend


    rem /**
    rem * Method setControllerFilterUnlock:
    rem * called to (temporarily) unlock the business component from the UIController driver
    rem * @param BBjString field$: the field to be unlocked
    rem * @param BBjNumber f_unlock: 1=unlock, 0=lock
    rem */
    method public void setControllerFilterUnlock(BBjString field$, BBjNumber f_unlock)

        #super!.setControllerFilterUnlock(field$,f_unlock)
        #getDataProvider().setControllerFilterUnlock(field$,f_unlock)

        #refresh(1)

    methodend


    rem /**
    rem * Method setSortOrder:
    rem * set the sort order to one column
    rem * @param BBjString col$: the column name
    rem * @param BBjNumber size: 0=descending, 1=ascending
    rem */
    method public void setSortOrder(BBjString col$,BBjNumber sortAscending)

        #setSortField(col$)
        #setSortAscending(sortAscending)

        #getDataProvider().setSortOrder(col$,sortAscending)

        #refresh(0)

    methodend


    rem /**
    rem * Method prepareResultSet:
    rem * Execute the SQL query and prepare the result set
    rem * @param BBjNumber first: start reading at the "first" row from the record set
    rem * @param BBjNumber last: read to the "last" row from the record set
    rem */
    method public void prepareResultSet(BBjNumber first, BBjNumber last)

        if last>=#getResultSet().size() then
            doIt=1
        else
            for i=first to last
                if #getResultSet().getItem(i)=null() then
                    doIt=1
                    break
                fi
            next
        fi

        if doIt then
            v! = #getDataProvider().prepareResultSet(first, last*3)

            if v!.size() then
                for i=0 to v!.size()-1
                    rec = v!.getItem(i)
                    rec!=#getResultSet().getItem(rec)
                    #getResultSet().setItem(rec,#processRecord(rec!))
                next
            fi
        fi

    methodend


    rem /**
    rem * Method getColumnAttributes:
    rem * return a data row holding all column-specific attributes
    rem * override to enrich data by formatting rules
    rem * in derived class, always call attr! = #super!.getColumnAttributes() first
    rem * @return DataRow attributes!: DataRow holding the column-specific attributes
    rem */
    method public DataRow getColumnAttributes()

        declare DataRow attr!

        if #super!.hasSetColumnAttributes() then
            attr! = #super!.getColumnAttributes()
        else
            attr! = #getDataProvider().getAttributesRecord()
            #super!.setColumnAttributes(attr!)
        fi

        methodret attr!

    methodend


    rem /**
    rem * Method processRecord:
    rem * enrich each record by formatting rules
    rem * @param DataRow attributes!: record passed into method
    rem * @return DataRow attributes!: record with added formatting and calculated fields
    rem */
    method protected DataRow processRecord(DataRow row!)

        row! = #super!.processRecord(row!)

        methodret row!

    methodend



    rem editing methods


    rem /**
    rem * Method canDeleteSelectedRecords:
    rem * override to tell UI if delete of the currently selected records is allowed
    rem * @return BBjNumber canDelete: 0=delete not allowed, 1=delete is allowed
    rem */
    method public BBjNumber canDeleteSelectedRecord()

        methodret 0

        rem TODO

        methodret #getDataProvider().getPrimaryKeySegments().size() AND #PrimaryTable$>""

    methodend


    rem /**
    rem * Method deleteSelectedRecords:
    rem * override to delete the currently selected records
    rem * these values are mainly used for filterin purpose
    rem */
    method public void deleteSelectedRecords()

        #getDataProvider().deleteRecords(#getSelection())
        #setEditedRecord(-1)
        #refresh(0)

    methodend

    method public DataRow getNewEntity()
        methodret #getDataProvider().getNewEntity()
    methodend


    rem /**
    rem * Method saveRecord
    rem * saves a record within the result set
    rem * @param BBjNumber recno: the record number in the resultset; -1 = new record
    rem * @param java.util.HashMap fields!: the fields
    rem */
    method public void saveRecord(BBjNumber recno, DataRow row!)

        if recno=-2 then

            row! = #onBeforeInsert(row!)

            #getDataProvider().insertRecord(row!)
            #refresh(0)
            #setEditedRecord(-1)
        fi

        if recno>-1 then
            orig_row! = #getResultSet().getItem(recno)
            rem TODO:  re-read the record from the database, compare to this version
            rem and abort operation if one of the edited fields has changed in the meantime

            row! = #onBeforeUpdate(row!, orig_row!)

            #getDataProvider().updateRecord(row!, orig_row!)
            #refresh(0)

            if recno <#getResultSet().size() then
                #getResultSet().setItem(recno,null())
            fi

            #setEditedRecord(-1)
        fi

    methodend

    rem /**
    rem * Method saveRecord
    rem * saves a record within the result set
    rem * @param BBjNumber recno: the record number in the resultset; -1 = new record
    rem * @param java.util.HashMap fields!: the fields
    rem */
    method public void saveRecord(BBjNumber recno, java.util.HashMap fields!)

        if recno=-2 then
            row! = #getNewEntity()
            ks! = fields!.keySet()
            it!=ks!.iterator()

            while it!.hasNext()
                f$=it!.next()
                v!=fields!.get(f$)
                row!.setFieldValue(f$,v!)
            wend

            row! = #onBeforeInsert(row!)

            #getDataProvider().insertRecord(row!)
            #refresh(0)
            #setEditedRecord(-1)
        fi

        if recno>-1 then
            orig_row! = #getResultSet().getItem(recno)
            rem TODO:  re-read the record from the database, compare to this version
            rem and abort operation if one of the edited fields has changed in the meantime

            row! = #getNewEntity()

            ks! = fields!.keySet()
            it!=ks!.iterator()

            while it!.hasNext()
                f$=it!.next()
                v!=fields!.get(f$)
                row!.setFieldValue(f$,v!)
            wend

            ? row!.toString()

            row! = #onBeforeUpdate(row!, orig_row!)

            #getDataProvider().updateRecord(row!, orig_row!)
            #refresh(0)

            if recno <#getResultSet().size() then
                #getResultSet().setItem(recno,null())
            fi

            #setEditedRecord(-1)
        fi

    methodend


    rem /**
    rem * Method validateRecord
    rem * saves a record within the result set
    rem * @param BBjNumber recno: the record number in the resultset; -1 = new record
    rem * @param java.util.HashMap fields!: the fields
    rem * @return BBjNumber passed: 0= no errors, 1=errors were reported
    rem */
    method public BBjNumber validateRecord(BBjNumber recno, java.util.HashMap fields!)

        if recno = -1 then
            methodret 0
        fi

        if recno=-2 then
            row! = #getNewEntity()
            ks! = fields!.keySet()
            it!=ks!.iterator()

            while it!.hasNext()
                f$=it!.next()
                v$=fields!.get(f$)
                row!.setFieldValue(f$,v$)
            wend

            methodret  #validateRecord(row!,null())
        fi

        if recno>-1 then
            orig_row! = #getResultSet().getItem(recno)
            rem TODO:  re-read the record from the database, compare to this version
            rem and abort operation if one of the edited fields has changed in the meantime

            row! = #getResultSet().getItem(recno)

            ks! = fields!.keySet()
            it!=ks!.iterator()

            while it!.hasNext()
                f$=it!.next()
                v!=fields!.get(f$)
                row!.setFieldValue(f$,v!)
            wend

            ? row!.toString()

            methodret #validateRecord(row!,orig_row!)

        fi

    methodend


    rem /**
    rem * Method updateResultsetForSingleRecord
    rem * updates a record within the result set
    rem * @param BBjNumber recno: the record number in the resultset; -1 = new record
    rem */
    method protected void updateResultsetForSingleRecord(BBjNumber recno)

        rem TODO

        #broadcastPartialUpdate(recno)

    methodend


    rem /**
    rem * Method setEditedRecord
    rem * set the record number in the resultset of the record that is currently being edited
    rem * @param BBjNumber recno: the record number being edited
    rem */
    method public void setEditedRecord(BBjNumber recno)

        if #super!.getEditingRecNo() <> recno then
            #super!.setEditedRecord(recno)
        fi

    methodend


    rem /**
    rem * Method onSelectionChange:
    rem * called after the selection changed, to notify UI components and UI Controller
    rem */
    method public void onSelectionChange()

        #super!.onSelectionChange()

    methodend

    rem /**
    rem * Method broadcastEdit:
    rem * called by UI to notify the BC about an ongoing edit
    rem * the BC will then draw responsible to notify the softlock controller
    rem * @param BBjString fieldName$: the field name that just was edited
    rem * @param BBjSting newContents$: the new Contents of the field
    rem */
    method public void broadcastEdit(BBjString fieldName$, BBjString newContent$)

        #super!.broadcastEdit(fieldName$, newContent$)

    methodend

    rem /**
    rem * Method getPrimaryKeySegments:
    rem * return the primary key segments
    rem * @return BBjVector primaryKeySegments!: a BBjVector with the primary key segments
    rem */
    method public BBjVector getPrimaryKeySegments()

        methodret #getDataProvider().getPrimaryKeySegments()

    methodend

classend
