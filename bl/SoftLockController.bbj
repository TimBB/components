rem package components.bl

rem /**
rem * SoftLockRemoteEditEvent
rem *
rem * Event class for SoftLockController
rem *
rem * @author Stephan Wald
rem * @version 1.0
rem */

class public SoftLockRemoteEditEvent

    field public BBjString          KeyValue$
    field public java.util.HashMap  EditedList!

classend


rem /**
rem * SoftLockController
rem *
rem * Class SoftLockController helps editing a record/value from two or more user at the same time
rem *
rem * @author Stephan Wald
rem * @version 1.0
rem */
class public SoftLockController

    field private BBjString     TableName$
    field private BBjNamespace  Ns!
    field private BBjNamespace  ListNs!

    rem vars for editor-role
    field private BBjString     LockedKey$


    rem /**
    rem * Constructor SoftLockController
    rem */
    method private SoftLockController()

    methodend


    rem /**
    rem * Constructor
    rem * Create a new SoftLockController object.
    rem * @param BBjString tableName$: the tablename that should be locked.
    rem */
    method public SoftLockController(BBjString tableName$)

        #TableName$=tableName$
        #ListNs!=BBjAPI().getNamespace("SoftLockController",#TableName$,1)

    methodend


    rem /**
    rem * Method onListNameSpace:
    rem * event handler method, handles a NameSpaceChange callback. This method is called only from the SoftLockController on edit start or edit stop.
    rem * @param BBjNamespaceEvent ev!: the event that causes this method call
    rem */
    method public void onListNameSpace(BBjNamespaceEvent ev!)

        record$ = ev!.getVariableName()

        if record$ > "" and record$ <> #LockedKey$ then
            if ev!.getNewValue() = "1" then
                BBjAPI().postPriorityCustomEvent("SoftLockStart",record$)
            else
                BBjAPI().postPriorityCustomEvent("SoftLockStop",record$)
            fi
        fi

    methodend


    rem /**
    rem * Method setLock:
    rem * set a lock for a field
    rem * @param BBjString keyValue$: the fieldname (key) to be locked
    rem * @return BBjNumber locked: true if lock was set successfull
    rem */
    method public BBjNumber setLock(BBjString keyValue$)

        if #LockedKey$>"" then
            #removeLock()
        fi

        #ListNs!.setValue(keyValue$,"1",err=couldNotLock)
        #ListNs!.setLock(keyValue$,10,err=couldNotLock)
        #LockedKey$=keyValue$

        #Ns!=BBjAPI().getNamespace("SoftLockRemoteEditController",#TableName$,1)

        methodret 1


        couldNotLock:
            throw "could not acquire lock",0

    methodend


    rem /**
    rem * Method isLocked:
    rem * check if the given field (key) is locked
    rem * @param BBjString keyValue$: the fieldname (key) to be checked if it is locked
    rem * @return BBjNumber locked: true if the field (key) is locked
    rem */
    method public BBjNumber isLocked(BBjString keyValue$)

        a!=#ListNs!.getValue(keyValue$,err=notLocked)
        #ListNs!.setLock(keyValue$,10,err=isLocked)
        #ListNs!.removeLock(keyValue$)

        notLocked:
            methodret 0

        isLocked:
            methodret 1

    methodend


    rem /**
    rem * Method removeLock:
    rem * remove the lock if it is set
    rem */
    method public void removeLock()

        if #LockedKey$="" then
            throw "not locked",0
        fi

        #Ns!.clear()
        #ListNs!.setValue(#LockedKey$,"2")
        #ListNs!.removeLock(#LockedKey$)
        #ListNs!.removeValue(#LockedKey$,err=*next)

        #LockedKey$=""

    methodend


    rem /**
    rem * Method onRemoteEdit:
    rem * event handler method, handles a remote edit callback.
    rem * @param BBjNamespaceEvent ev!: the fieldname (key) to be checked if it is locked
    rem * @return BBjNumber locked: true if the field (key) is locked
    rem */
    method public void onRemoteEdit(BBjNamespaceEvent ev!)

        variable$   = ev!.getVariableName()
        hm!         = ev!.getNewValue()

        declare SoftLockRemoteEditEvent event!
        event! = new SoftLockRemoteEditEvent()
        event!.setKeyValue(variable$)
        event!.setEditedList(hm!)
        BBjAPI().postPriorityCustomEvent("SoftLockRemoteEdit",event!)

    methodend


    rem /**
    rem * Method broadcastEdit:
    rem * broadcasts a message that a softlock value has changed
    rem * @param BBjString fieldName$: the field name that has changed
    rem * @param BBjString value$: the new (changed) value of the field
    rem */
    method public void broadcastEdit(BBjString fieldName$, BBjString value$)

        if  #LockedKey$="" then
            throw "not locked",18
        fi

        hm! = #Ns!.getValue(#LockedKey$,err=*next)

        if hm! = null() then
            hm! = new java.util.HashMap()
        fi

        hm!.put(fieldName$,value$)
        #Ns!.removeValue(#LockedKey$,err=*next)
        #Ns!.setValue(#LockedKey$,hm!)

    methodend


    rem /**
    rem * Method setCallbackForSoftlock:
    rem * set the labels for handling the lock and unlock callback's
    rem * @param BBjString labelOnLockStart$: the label that handles the "start lock" callback
    rem * @param BBjString labelOnLockStop$: the label that handles the "stop lock" callback
    rem */
    method public void setCallbackForSoftlock(BBjString labelOnLockStart$, BBjString labelOnLockStop$)

        #setCallbackForSoftlock(null(),labelOnLockStart$, labelOnLockStop$)

    methodend


    rem /**
    rem * Method setCallbackForSoftlock:
    rem * set the labels or methods for handling the lock and unlock callback's
    rem * @param CustomObject o!: the custom object containing the label's or method's for handling the lock and unlock callbacks
    rem * @param BBjString labelOnLockStart$: the label or method that handles the "start lock" callback
    rem * @param BBjString labelOnLockStop$: the label or method that handles the "stop lock" callback
    rem */
    method public void setCallbackForSoftlock(CustomObject o!, BBjString labelOnLockStart$, BBjString labelOnLockStop$)

        #ListNs!.removeCallbackForVariableChange(#NotifyOnLockKey$,err=*next)

        if o!=null() then
            BBjAPI().setCustomEventCallback("SoftLockStart",labelOnLockStart$)
            BBjAPI().setCustomEventCallback("SoftLockStop",labelOnLockStop$)
        else
            BBjAPI().setCustomEventCallback("SoftLockStart",o!,labelOnLockStart$)
            BBjAPI().setCustomEventCallback("SoftLockStop",o!,labelOnLockStop$)
        fi

        #ListNs!.setCallbackForNamespaceChange(#this!,"onListNameSpace")

    methodend


    rem /**
    rem * Method setCallbackForRemoteEdit:
    rem * set the label for handling the "on remote edit" callback
    rem * @param BBjString labelOnRemoteEdit$: the label that handles the "on remote edit" callback
    rem */
    method public void setCallbackForRemoteEdit(BBjString labelOnRemoteEdit$)

        #setCallbackForRemoteEdit(null(), labelOnRemoteEdit$)

    methodend


    rem /**
    rem * Method setCallbackForRemoteEdit:
    rem * set the label or method for handling the "on remote edit" callback
    rem * @param CustomObject o!: the custom object containing the label or method for handling the "on remote edit" callback
    rem * @param BBjString labelOnRemoteEdit$: the label or method that handles the "on remote edit" callback
    rem */
    method public void setCallbackForRemoteEdit(CustomObject o!, BBjString labelOnRemoteEdit$)

        if o!=null() then
            BBjAPI().setCustomEventCallback("SoftLockRemoteEdit",labelOnRemoteEdit$)
        else
            BBjAPI().setCustomEventCallback("SoftLockRemoteEdit",o!,labelOnRemoteEdit$)
        fi

        #Ns!=BBjAPI().getNamespace("SoftLockRemoteEditController",#TableName$,1)
        #Ns!.setCallbackForNamespaceChange(#this!,"onRemoteEdit")

    methodend


    rem /**
    rem * Method clearCallbackForSoftlock:
    rem * clear all calback handlers (for lock, unlock and on remote edit)
    rem */
    method public void clearCallbackForSoftlock()

        #ListNs!.removeCallbackForVariableChange(#NotifyOnLockKey$,err=*next)

        #NotifyOnLockKey$ = ""

        BBjAPI().clearCustomEventCallback("SoftLockStart")
        BBjAPI().clearCustomEventCallback("SoftLockStop")
        BBjAPI().clearCustomEventCallback("SoftLockRemoteEdit")

    methodend

classend




wnd! = BBjAPI().openSysGui("X0").addWindow(100,100,400,100,"TEST")
wnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")
ed! = wnd!.addEditBox(100,2,2,200,22,"")


declare SoftLockController s1!
s1! = new SoftLockController("TEST")

a=msgbox("Editor or Listener?",7,"Choose side","Editor","Listener")

if a=1 then
    rem editor

    l=s1!.setLock("1",err=*next)

    if l=0 then
        a=msgbox("Could not acquire lock")
        release
    fi

    ed!.setCallback(BBjAPI.ON_EDIT_MODIFY,"editmodify")
else
    s1!.setCallbackForSoftlock("softlocked", "unsoftlocked")
    s1!.setCallbackForRemoteEdit("remoteedit")
fi


process_events
byebye:

if a=1 then
    s1!.removeLock()
fi

bye


editmodify:
declare auto BBjEditModifyEvent ev!
ev!= BBjAPI().getLastEvent()
text$=ev!.getText()
s1!.broadcastEdit("FIELD",text$)
return

softlocked:
ed!.setEditable(0)
return

unsoftlocked:
ed!.setEditable(1)
return

remoteedit:
declare auto BBjCustomEvent edev!
edev!=BBjAPI().getLastEvent()
evstring! = edev!.getObject()
ed!.setText(evstring!.getEditedList().get("FIELD"))
return
